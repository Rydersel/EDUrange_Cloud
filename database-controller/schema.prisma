generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChallengeType {
  id         String       @id @default(cuid())
  name       String
  challenges Challenges[]
}

model Challenges {
  id              String        @id @default(cuid())
  name            String
  challengeImage  String
  challengeTypeId String
  AppsConfig      Json          @default("{}")
  challengeType   ChallengeType @relation(fields: [challengeTypeId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  admin              Boolean
  points             Int                 @default(0)
  accounts           Account[]
  Authenticator      Authenticator[]
  challengeInstances ChallengeInstance[]
  sessions           Session[]
}

model ChallengeInstance {
  id             String   @id @default(uuid())
  challengeId    String
  userId         String
  challengeImage String
  challengeUrl   String
  creationTime   DateTime @default(now())
  status         String
  flagSecretName String
  flag           String
  user           User     @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
