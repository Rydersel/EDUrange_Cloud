generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  role                 UserRole              @default(STUDENT)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  accounts             Account[]
  challengeCompletions ChallengeCompletion[]
  challengeInstances   ChallengeInstance[]
  groupPoints          GroupPoints[]
  questionCompletions  QuestionCompletion[]
  sessions             Session[]
  instructorGroups     CompetitionGroup[]    @relation("GroupInstructors")
  memberOf             CompetitionGroup[]    @relation("GroupMembers")
}

model CompetitionGroup {
  id          String                  @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  accessCodes CompetitionAccessCode[]
  challenges  GroupChallenge[]
  userPoints  GroupPoints[]
  instructors User[]                  @relation("GroupInstructors")
  members     User[]                  @relation("GroupMembers")
}

model GroupChallenge {
  id                  String                @id @default(cuid())
  points              Int
  challengeId         String
  groupId             String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  completions         ChallengeCompletion[]
  challenge           Challenges            @relation(fields: [challengeId], references: [id])
  group               CompetitionGroup      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  questionCompletions QuestionCompletion[]

  @@unique([challengeId, groupId])
}

model ChallengeCompletion {
  id               String         @id @default(cuid())
  userId           String
  groupChallengeId String
  pointsEarned     Int
  completedAt      DateTime       @default(now())
  groupChallenge   GroupChallenge @relation(fields: [groupChallengeId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupChallengeId])
}

model CompetitionAccessCode {
  id        String           @id @default(cuid())
  code      String           @unique
  expiresAt DateTime?
  maxUses   Int?
  usedCount Int              @default(0)
  groupId   String
  createdAt DateTime         @default(now())
  createdBy String
  group     CompetitionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          String            @id @default(cuid())
  eventType   ActivityEventType
  userId      String
  challengeId String?
  groupId     String?
  metadata    Json
  timestamp   DateTime          @default(now())
}

model ChallengeType {
  id         String       @id @default(cuid())
  name       String
  challenges Challenges[]
}

model ChallengeQuestion {
  id          String               @id @default(cuid())
  challengeId String
  content     String
  type        String
  points      Int
  answer      String
  order       Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  challenge   Challenges           @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  completions QuestionCompletion[]
}

model QuestionCompletion {
  id               String            @id @default(cuid())
  questionId       String
  userId           String
  groupChallengeId String
  completedAt      DateTime          @default(now())
  pointsEarned     Int
  groupChallenge   GroupChallenge    @relation(fields: [groupChallengeId], references: [id], onDelete: Cascade)
  question         ChallengeQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, groupChallengeId])
}

model ChallengeAppConfig {
  id                String     @id @default(cuid())
  challengeId       String
  appId             String
  title             String
  icon              String
  width             Int
  height            Int
  screen            String
  disabled          Boolean    @default(false)
  favourite         Boolean    @default(false)
  desktop_shortcut  Boolean    @default(false)
  launch_on_startup Boolean    @default(false)
  additional_config Json?      @default("{}")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  challenge         Challenges @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, appId])
}

model Challenges {
  id              String               @id @default(cuid())
  name            String
  challengeImage  String
  difficulty      ChallengeDifficulty  @default(MEDIUM)
  challengeTypeId String
  description     String?
  appConfigs      ChallengeAppConfig[]
  questions       ChallengeQuestion[]
  challengeType   ChallengeType        @relation(fields: [challengeTypeId], references: [id], onDelete: Cascade)
  groupChallenges GroupChallenge[]
}

model ChallengeInstance {
  id             String   @id @default(uuid())
  challengeId    String
  userId         String
  challengeImage String
  challengeUrl   String
  creationTime   DateTime @default(now())
  status         String
  flagSecretName String
  flag           String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GroupPoints {
  id        String           @id @default(cuid())
  points    Int              @default(0)
  userId    String
  groupId   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  group     CompetitionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum ActivityEventType {
  CHALLENGE_STARTED
  CHALLENGE_COMPLETED
  GROUP_JOINED
  GROUP_CREATED
  ACCESS_CODE_GENERATED
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
  VERY_HARD
}
