# docker buildx build -f dockerfile.sync --platform linux/amd64 -t registry.edurange.cloud/edurange/database-sync . --push

# Builder stage
FROM python:3.13.3-slim  AS builder

# Set environment variables for better Python performance
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Set the working directory
WORKDIR /build

# Copy requirements first for better caching
COPY requirements.txt .
COPY schema.prisma .

# Install build dependencies and requirements
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc && \
    pip install --no-cache-dir -r requirements.txt && \
    # Generate Python Prisma client
    prisma generate --generator client_py && \
    # Ensure generated files are accessible
    chmod -R a+rX /usr/local/lib/python3.13/site-packages/prisma/ && \
    # Clean up
    apt-get purge -y gcc && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Final stage
FROM python:3.13.3-slim

# Set working directory to /app
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONMALLOC=default

# Copy application code and files needed for installation
COPY sync/ .
COPY schema.prisma .
COPY requirements.txt .
COPY .env .

# Install Python dependencies directly in the final image
# This ensures all dependencies are properly installed in the correct site-packages directory
RUN pip install --no-cache-dir -r requirements.txt

# Copy Prisma client files and cache from builder
COPY --from=builder /usr/local/lib/python3.13/site-packages/prisma/ /usr/local/lib/python3.13/site-packages/prisma/
COPY --from=builder /root/.cache/prisma-python/ /root/.cache/prisma-python/

# Verify installation and show debug info
RUN python -m pip list && \
    python -c "from prisma import Prisma; print('Prisma client properly installed')" && \
    echo "PATH=$PATH"

# Run the application
CMD ["python", "main.py"]
